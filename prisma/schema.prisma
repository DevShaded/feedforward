// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  password      String?
  emailVerified DateTime?
  image         String?
  sessions      Session[]
  boards        FeatureBoard[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model FeatureBoard {
  id          String    @id @default(cuid())
  name        String
  description String?
  slug        String    @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  features    Feature[]
}

model Feature {
  id          String    @id @default(cuid())
  title       String
  description String
  status      String    @default("PENDING")
  priority    Int       @default(0)
  category    String?
  tags        String    @default("[]")
  authorName  String
  authorEmail String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  boardId     String
  board       FeatureBoard @relation(fields: [boardId], references: [id], onDelete: Cascade)
  votes       Vote[]
  comments    Comment[]
  dependencies Feature[] @relation("FeatureDependencies")
  dependentOn Feature[] @relation("FeatureDependencies")
}

model Vote {
  id         String   @id @default(cuid())
  ipAddress  String
  createdAt  DateTime @default(now())
  featureId  String
  feature    Feature  @relation(fields: [featureId], references: [id], onDelete: Cascade)
  weight     Int      @default(1)
  reason     String?
  isDownvote Boolean  @default(false)

  @@unique([featureId, ipAddress])
}

model Comment {
  id          String   @id @default(cuid())
  content     String
  authorName  String
  authorEmail String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  featureId   String
  feature     Feature  @relation(fields: [featureId], references: [id], onDelete: Cascade)
}